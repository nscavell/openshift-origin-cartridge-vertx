#!/bin/bash -e

source $OPENSHIFT_CARTRIDGE_SDK_BASH

VERTX_HOME=${OPENSHIFT_VERTX_DIR}/dist
VERTX_PID_FILE=${OPENSHIFT_HOMEDIR}/app-root/runtime/vertx.pid

logf="$OPENSHIFT_VERTX_LOG_DIR/vertx.log"

cartridge_type="vertx"


# Check if the vertx process is running
function isrunning() {
    
    # Check for running app
    if [ -f "$VERTX_PID_FILE" ]; then
      vertxpid=$(cat $VERTX_PID_FILE);
      if /bin/ps --pid $vertxpid 1>&2 >/dev/null;
      then
        return 0
      fi
    fi
   
    return 1
}

# Kill the process given by $1 and its children
killtree() {
    local _pid=$1
    for _child in $(ps -o pid --no-headers --ppid ${_pid}); do
        killtree ${_child}
    done

    local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
    if [ -z $should_be_gone_pid ]; then
        return
    else
        kill -TERM ${_pid}
    fi

    local count=0
    while [ ${count} -lt 15 ]
    do
        local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
        if [ -z $should_be_gone_pid ]; then
                return
        else
                sleep 2
                let count=${count}+1
        fi
    done

    local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
    if [ ! -z $should_be_gone_pid ]
    then
        kill -9 ${_pid}
    fi
}

function stop() {
  echo "Stopping $cartridge_type cart"
  
  if isrunning; then
    if [ -f "$VERTX_PID_FILE" ]; then
      pid=$(cat $VERTX_PID_FILE);
      echo "Sending SIGTERM to vertx:$pid ..." 1>&2
      killtree $pid
    else 
      echo "Failed to locate Vert.x PID File" 1>&2
    fi
  fi
}

function replace_envs {
  # Need to copy the cluster.xml file everytime (seems to be the only way to get this to work)
  cp -r ${OPENSHIFT_VERTX_DIR}/versions/${OPENSHIFT_VERTX_VERSION}/dist/conf/cluster.xml $OPENSHIFT_VERTX_DIR/dist/conf
  
  if [ -z "$OPENSHIFT_VERTX_CLUSTER" ]; then
    OPENSHIFT_VERTX_CLUSTER="${OPENSHIFT_VERTX_IP}"
  fi
  
  OPENSHIFT_VERTX_PROXY_IP=$(ping -c 1 ${OPENSHIFT_GEAR_DNS} | awk '{ print $3 ; exit }' | sed 's/(//g' | sed 's/)//g')
  
  hostnames=
  for address in $OPENSHIFT_VERTX_CLUSTER; do
    hostnames="<hostname>$address<\/hostname>${hostnames}"
  done
  
  pushd $OPENSHIFT_VERTX_DIR
      sed -i  -e "s/\${env.OPENSHIFT_VERTX_CLUSTER_PROXY_PORT}/${OPENSHIFT_VERTX_CLUSTER_PROXY_PORT}/g" \
              -e "s/\${env.OPENSHIFT_VERTX_CLUSTER_PORT}/${OPENSHIFT_VERTX_CLUSTER_PORT}/g" \
              -e "s/\${env.OPENSHIFT_VERTX_PROXY_IP}/${OPENSHIFT_VERTX_PROXY_IP}/g" \
              -e "s/\${env.OPENSHIFT_VERTX_IP}/${OPENSHIFT_VERTX_IP}/g" \
              -e "s/\${env.OPENSHIFT_VERTX_CLUSTER}/${hostnames}/g" \
              ./dist/conf/cluster.xml
  popd
}

function start() {
  replace_envs
  
  pushd ${OPENSHIFT_HOMEDIR}/app-root/repo

    if [ -z "$OPENSHIFT_VERTX_CLUSTER_PROXY_PORT" ]; then
      $VERTX_HOME/bin/vertx run ./server.js >> $logf 2>&1 &
    else
      VERTX_OPTS="-Dhazelcast.local.localAddress=${OPENSHIFT_VERTX_IP} -Dhazelcast.socket.server.bind.any=false -Dhazelcast.socket.client.bind=false \
                  -Dvertx.cluster.public.host=${OPENSHIFT_VERTX_PROXY_IP} -Dvertx.cluster.public.port=${OPENSHIFT_VERTX_VERTX_PROXY_PORT}"
      export VERTX_OPTS

      $VERTX_HOME/bin/vertx run ./server.js -cluster -cluster-port $OPENSHIFT_VERTX_VERTX_PORT -cluster-host $OPENSHIFT_VERTX_IP >> $logf 2>&1 &
    fi
    
    PROCESS_ID=$!
    echo "$PROCESS_ID" > ${VERTX_PID_FILE}
  popd

}

function restart() {
    echo "Restarting $cartridge_type cart"
   
    stop
    
    start
}

case "$1" in
  start)        start ;;
  stop)     stop ;;
  restart)    restart ;;
  *)            exit 0
esac
